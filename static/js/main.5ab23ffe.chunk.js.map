{"version":3,"sources":["logo.svg","Square.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","concat","isBold","value","onClick","Board","renderSquare","i","boldSquares","key","squares","boards","size","rows","j","push","calculateWinner","lines","length","a","b","c","Game","status","useState","Array","fill","move","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","sortAsc","setSortAsc","current","winner","sortStr","moves","map","step","desc","parseInt","jumpTo","reverse","forEach","cell","index","historyy","slice","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ab23ffe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react'\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={\"square \".concat((props.isBold)? ((props.value == 'X')? ' x-color': ' o-color') : '')} \r\n            onClick={() => props.onClick()}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","import React, { Component } from 'react'\r\nimport Square from './Square';\r\n\r\nfunction Board(props) {\r\n    const renderSquare = function(i){\r\n        const isBold = (props.boldSquares[i])? true : false;\r\n        return <Square key={i} value={props.squares[i]} onClick={() => props.onClick(i)} isBold={isBold}/>\r\n    }\r\n    const boards = [];\r\n    for (let i = 0; i < props.size; i++){\r\n        const rows = [];\r\n        for (let j = 0; j < props.size; j++){\r\n            rows.push(\r\n                renderSquare(i * props.size + j)\r\n            )\r\n        }\r\n        boards.push(\r\n            <div key={i} className=\"board-row\">\r\n                    {rows}     \r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            {boards}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React, { useState } from 'react'\r\nimport Board from './Board'\r\n\r\nfunction Game(props){\r\n    const [size, setSize] = useState(3);\r\n    const [history, setHistory] = useState([\r\n        {\r\n            squares: Array(size * size).fill(null),\r\n            move: null\r\n        }\r\n    ]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [sortAsc, setSortAsc] = useState(true);\r\n\r\n    const handleClick = function(i){\r\n        const historyy = history.slice(0, stepNumber + 1);\r\n        const current = historyy[historyy.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = (xIsNext)? 'X' : 'O';\r\n        setHistory(historyy.concat([{\r\n            squares: squares,\r\n            move: i\r\n        }]));\r\n        setStepNumber(historyy.length);\r\n        setXIsNext(!xIsNext);\r\n    }\r\n\r\n    const jumpTo = function(step){\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n\r\n    const handleSort = function(){\r\n        setSortAsc(!sortAsc);\r\n    }\r\n\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const boldSquares = {};\r\n    const sortStr = (!sortAsc)? 'Sort Ascending' : 'Sort Descending';\r\n\r\n    const moves = history.map((step, move) => {\r\n        const desc = move? 'Go to move #' + move  + ` ->   At: (Row: ${parseInt(step.move /3 + 1)}, Column: ${parseInt(step.move % 3 + 1)})` \r\n                        + `, Player: ${(move % 2 != 0)? 'X' : 'O'}`\r\n                    : 'Go to game start';\r\n        return (\r\n            <li key={move}>\r\n                <button onClick={() => jumpTo(move)}>{desc}</button>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    if (!sortAsc){\r\n        moves.reverse();\r\n    }\r\n\r\n    let status;\r\n    if (winner){\r\n        winner.forEach((cell, index) => {\r\n            boldSquares[cell] = true;\r\n        })\r\n        status = 'Winner: ' + current.squares[winner[0]];\r\n    } else {\r\n        // Bold last move\r\n        if (current.move != null){\r\n            boldSquares[current.move] = true;\r\n        }\r\n        // Draw\r\n        if (stepNumber == 9){\r\n            status = 'Draw';\r\n        } else {\r\n            status = 'Next player: ' + ((xIsNext)? 'X' : 'O');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <div className=\"status\">\r\n                    {status}\r\n                </div>\r\n                <Board \r\n                    size={size}\r\n                    squares={current.squares}\r\n                    onClick={(i) => handleClick(i)}\r\n                    boldSquares={boldSquares}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                \r\n            </div>\r\n\r\n            <div className=\"sortWrapper\">\r\n                <h3>Sort</h3>\r\n                <button onClick={() => handleSort()}>{sortStr}</button>\r\n            </div>\r\n\r\n            <div className=\"moveHistory\">\r\n                <h3>History</h3>\r\n                <ol>\r\n                    {moves}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return lines[i];\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Game from './Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}